CCS PCM C Compiler, Version 5.105Pd, 1               23-Aðu-21 23:20
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   C:\Users\hakan\Documents\GitHub\GomuluSistemler\Uygulamalar\003B\main.lst

               ROM used:   77 words (1%)
                           Largest free fragment is 2048
               RAM used:   8 (2%) at main() level
                           8 (2%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   019
0003:  NOP
.................... #include <main.h>
.................... #include <16F877A.h>
.................... //////////// Standard Header file for the PIC16F877A device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2020 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F877A
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... #use delay(crystal=20000000)
.................... 
.................... 
.................... 
.................... #fuses XT, NOWDT, NOPROTECT, NOBROWNOUT, NOLVP, NOPUT, NOWRT, NODEBUG
.................... 
.................... #use delay(clock=4M)
0004:  MOVLW  23
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   018
000A:  MOVLW  01
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  4A
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  GOTO   016
0016:  DECFSZ 00,F
0017:  GOTO   00A
0018:  RETURN
.................... 
.................... void main()
0019:  MOVF   03,W
001A:  ANDLW  1F
001B:  MOVWF  03
001C:  BSF    03.5
001D:  BSF    1F.0
001E:  BSF    1F.1
001F:  BSF    1F.2
0020:  BCF    1F.3
0021:  MOVLW  07
0022:  MOVWF  1C
0023:  BCF    03.7
.................... {
....................    int x, k;
....................    set_tris_b(0x00); //0000 0000 hepsi output pini atandilar.
0024:  MOVLW  00
0025:  MOVWF  06
....................    set_tris_d(0x03); //0000 0011 D0 ve D1 input pini atandilar.
0026:  MOVLW  03
0027:  MOVWF  08
....................    output_b(0); //B pinlerine 0 bas.
0028:  CLRF   06
0029:  BCF    03.5
002A:  CLRF   06
....................    while(TRUE)
....................    {
....................       x=1;
002B:  MOVLW  01
002C:  MOVWF  21
....................       if(input(pin_d0)==1){ //D0 pininden giris 1 ise
002D:  BSF    03.5
002E:  BSF    08.0
002F:  BCF    03.5
0030:  BTFSS  08.0
0031:  GOTO   04B
....................          for(k=0;k<8;k++){
0032:  CLRF   22
0033:  MOVF   22,W
0034:  SUBLW  07
0035:  BTFSS  03.0
0036:  GOTO   043
....................             output_b(x); // B pinlerinden x olana 1 ciktisini uret.
0037:  BSF    03.5
0038:  CLRF   06
0039:  BCF    03.5
003A:  MOVF   21,W
003B:  MOVWF  06
....................             delay_ms(100); // 100ms bekle
003C:  MOVLW  64
003D:  MOVWF  23
003E:  CALL   004
....................             x *= 2; // Bir sonraki cikisa gec. Ornegin RB0 dan RB1 e 
003F:  BCF    03.0
0040:  RLF    21,F
0041:  INCF   22,F
0042:  GOTO   033
....................          }
....................          output_b(x); // B pinlerine 0 gonder
0043:  BSF    03.5
0044:  CLRF   06
0045:  BCF    03.5
0046:  MOVF   21,W
0047:  MOVWF  06
....................          delay_ms(100); //100ms bekle
0048:  MOVLW  64
0049:  MOVWF  23
004A:  CALL   004
....................       }
004B:  GOTO   02B
....................    }
.................... 
.................... }
004C:  SLEEP

Configuration Fuses:
   Word  1: 3F39   XT NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
